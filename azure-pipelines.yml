# Python package

# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: ubuntu-latest
strategy:
  matrix:
    Python37:
      python.version: '3.7'

steps:



- task: ksmazpipelinetask@0
  inputs:
    keepersecretconfig: $(sm-config)
    secrets: |
      6ya_fdc6XTsZ7i7x9Jcodg/field/password > env:env_password
      6ya_fdc6XTsZ7i7x9Jcodg/field/password > var:var_password
      6ya_fdc6XTsZ7i7x9Jcodg/field/password > out:out_password
      6ya_fdc6XTsZ7i7x9Jcodg/field/password > out_password2
      6ya_fdc6XTsZ7i7x9Jcodg/file/build-vsix.sh > file:/tmp/build-vsix.sh


- powershell: |
    Write-Host "Using an input-macro works: $(var_password)"
    Write-Host "Using the mapped env var for this task works and is recommended: $env:MY_MAPPED_ENV_PASSWORD"
  env:
    MY_MAPPED_ENV_PASSWORD: $(env_password) # the recommended way to map to an env variable

# - bash: |
#     echo "Using an input-macro works: $(mySecret)"
#     echo "Using the env var directly does not work: $MYSECRET"
#     echo "Using a global secret var mapped in the pipeline does not work either: $GLOBAL_MYSECRET"
#     echo "Using a global non-secret var mapped in the pipeline works: $GLOBAL_MY_MAPPED_ENV_VAR" 
#     echo "Using the mapped env var for this task works and is recommended: $MY_MAPPED_ENV_VAR"
#   env:
#     MY_MAPPED_ENV_VAR: $(mySecret) # the recommended way to map to an env variable



- script: |
    ls -la /tmp
  displayName: 'Listing files in /tmp directory'


- script: |
    echo "Secret pazzword=$(pazzword)"
    echo $PAZZWORD
  displayName: 'View Secret'

- powershell: |
    echo ONE
    echo $env:PAZZWORD
    echo "$env:PWD"
    echo TWO
    echo $env:LOGIN
  env:
    PWD: $(pazzword)
  displayName: Powershell1
# - script: |
#     python -m pip install --upgrade pip
#     pip install -r requirements.txt
#   displayName: 'Install dependencies'

# - script: |
#     pip install pytest pytest-azurepipelines
#     pytest
#   displayName: 'pytest'
